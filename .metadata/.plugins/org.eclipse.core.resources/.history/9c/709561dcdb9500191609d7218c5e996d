package com.secondMaven.steps;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.junit.Assert;
import org.openqa.selenium.WebElement;

import com.secondMaven.pages.AddEmployeePage;
import com.secondMaven.pages.HomePage;
import com.secondMaven.pages.LoginPage;
import com.secondMaven.utils.BaseClass;
import com.secondMaven.utils.CommonMethods;
import com.secondMaven.utils.ConfigsReader;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import cucumber.api.java.eo.Sed;
import io.cucumber.datatable.DataTable;


public class AddEmployeeSteps extends CommonMethods {

	LoginPage login;
	HomePage home;
	AddEmployeePage emp;
	
	@Given("I logged in into OrangeHrm")
	public void i_logged_in_into_OrangeHrm() {
		login = new LoginPage();
		home = new HomePage();
		emp = new AddEmployeePage();
		login.login(ConfigsReader.getProperty("username"), ConfigsReader.getProperty("password"));
	}

	@When("I click on PIM link")
	public void i_click_on_PIM_link() {
		click(home.PIM);
	}

	@When("I click on  Add Employee link")
	public void i_click_on_Add_Employee_link() {
		click(home.addEmployee);
	}
	
	@When("I provide {string}, {string}, {string} and {string}")
	public void i_provide_and(String fName, String mName, String lName, String location) {
		sendText(emp.firstName, fName);
		sendText(emp.middleName, mName);
		sendText(emp.lastName, lName);
		click(emp.location);
		selectList(emp.locationList, location);
	}

	@When("I click on save button")
	public void i_click_on_save_button() {
		jsClick(emp.saveBtn);
	}
	
	@Then("I see {string}, {string} is displayed")
	public void i_see_is_displayed(String fName, String lName) {
		waitForElementBeClickable(emp.empCheck, 20);
		String empName=emp.empCheck.getText();
		Assert.assertEquals(fName+" "+lName, empName);
	}
	
	@When("I provide firstname, midlename, lastname and location")
	public void i_provide_firstname_midlename_lastname_and_location() throws InterruptedException {
	   sendText(emp.firstName, "Jane");
	   sendText(emp.middleName, "J");
	   sendText(emp.lastName,"Black");
	click(emp.location);
	selectList(emp.locationList, "HQ");
	
	}

	@When("I click on create login details")
	public void i_click_on_create_login_details() {
	   click(emp.createLoginDetails);
	}

	@When("I provide all mandatory fields")
	public void i_provide_all_mandatory_fields() throws InterruptedException {
	   sendText(emp.mandatoryUserName, "Admin123xuh5");
	   sendText(emp.mandatoryPassword, "l6VUS8uWx@");
	   sendText(emp.mandatoryConPassword, "l6VUS8uWx@");
	  
	   selectList(emp.mandatoryEssRole, "Default ESS");
	   
	   selectList(emp.mandatorySupervisorRole, "Default Supervisor");
	  
	   jsClick(emp.mandatorySave);
	  // click(emp.mandatorySave); 
	}

	@Then("I see employee is added successfully")
	public void i_see_employee_is_added_successfully() {
		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		if(emp.verifyEmployee.isDisplayed()) {
	   String expectedTitle="Jane Black";
	   String empName=emp.verifyEmployee.getText();
		Assert.assertEquals(expectedTitle, empName);
		}
	}}
	
	
//	@When("I enter invalid username and password I see errorMessage")
//	   public void i_enter_invalid_username_and_password_I_see_errorMessage(DataTable wrongCredentials) {
//	       List<Map<String, String>> maps = wrongCredentials.asMaps();
//	       for (Map<String, String> map : maps) {
//	           sendText(login.userName, map.get("UserName"));
//	           sendText(login.password, map.get("Password"));
//	           click(login.loginBtn);
//	           // verifying the text of error message
//	           String actualError = login.message.getText().trim();
//	           String expectedError = map.get("ErrorMessage");
//	           Assert.assertEquals(expectedError, actualError);
//	       }}
//	
//	@Then("I see following labels")
//	
//	   public void i_see_following_label(DataTable addEmpLabel) {
//	       List<String> labels = addEmpLabel.asList();
//	       System.out.println("----Printing labels from cucumber dataTable------");
//	       for (String label : labels) {
//	           System.out.println(label);
//	       }
//	       System.out.println("--Printing labels text from the application");
//	       List<WebElement> labelList = emp.addEmpLabels;
//	       List<String> actualLabels = new ArrayList<>();
//	       for (WebElement label : labelList) {
//	           String labelText = label.getText();
//	           if (!labelText.isEmpty()) {
//	           //    System.out.println(labelText);
//	               actualLabels.add(labelText.replace("*", ""));
//	           }
//	       }
//	       Assert.assertTrue(actualLabels.equals(labels));
//	
//	
//}}